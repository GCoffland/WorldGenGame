#include "StaticDefinitions.hlsl"
#include "WorldGenerationGlobals.hlsl"

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define THREADS 8
#define FACES_PER_VOXEL 6
#define VERTS_PER_FACE 4
#define QUADBUFFLENGTHINDEX 1
#define VERTBUFFLENGTHINDEX 0



static int3 DIRECTIONS[6] =     { int3(-1, 0, 0), int3(1, 0, 0), int3(0, -1, 0), int3(0, 1, 0), int3(0, 0, -1), int3(0, 0, 1) };
static int3 FACES[6][4] = {     { int3(0, 0, 1), int3(0, 1, 1), int3(0, 1, 0), int3(0, 0, 0)},      //X_NEG
                                { int3(1, 0, 0), int3(1, 1, 0), int3(1, 1, 1), int3(1, 0, 1)},      //X_POS
                                { int3(0, 0, 1), int3(0, 0, 0), int3(1, 0, 0), int3(1, 0, 1)},      //Y_NEG
                                { int3(0, 1, 0), int3(0, 1, 1), int3(1, 1, 1), int3(1, 1, 0)},      //Y_POS
                                { int3(0, 0, 0), int3(0, 1, 0), int3(1, 1, 0), int3(1, 0, 0)},      //Z_NEG
                                { int3(1, 0, 1), int3(1, 1, 1), int3(0, 1, 1), int3(0, 0, 1)} };    //Z_POS

struct QuadVertexBufferStruct
{
    VertexBufferStruct structs[4];
};

struct QuadBufferStruct
{
    uint indicies[4];
};


uint3 DispatchArgs;
float2 TNF;
StructuredBuffer<float2> BlockUVs;
StructuredBuffer<int> BlockMap;
StructuredBuffer<int> BorderBlockMap;
RWStructuredBuffer<QuadVertexBufferStruct> VertexResult;
RWStructuredBuffer<QuadBufferStruct> QuadResult;
RWStructuredBuffer<int> BufferLengths;

uint Calc1dID(uint3 id)
{
    return (id[0]) + (id[1] * THREADS * DispatchArgs[0]) + (id[2] * THREADS * DispatchArgs[0] * THREADS * DispatchArgs[1]);
}

float2 GetBlockUV(int blockId, int face_index)
{
    return BlockUVs[(blockId * FACES_PER_VOXEL) + face_index];
}

bool IsExternalBlock(int3 pos, out int dir_index)
{
    for (int i = 0; i < 3; i++)
    {
        if (pos[i] < 0)
        {
            dir_index = i * 2;
            return true;
        }
        else if (pos[i] >= THREADS * (int)DispatchArgs[i])
        {
            dir_index = (i * 2) + 1;
            return true;
        }
    }
    return false;
}

int GetBorderBlock(int dir_index, int3 pos)
{
    int index1d = 0;
    switch (dir_index)
    {
        case(DIRECTION_X_NEG):
            index1d = Calc1dID(uint3(pos[2], pos[1], 0));
            break;
        case(DIRECTION_X_POS):
            index1d = Calc1dID(uint3(63 - pos[2], pos[1], 0));
            break;
        case(DIRECTION_Y_NEG):
            index1d = Calc1dID(uint3(pos[0], pos[2], 0));
            break;
        case(DIRECTION_Y_POS):
            index1d = Calc1dID(uint3(pos[0], 63 - pos[2], 0));
            break;
        case(DIRECTION_Z_NEG):
            index1d = Calc1dID(uint3(63 - pos[0], pos[1], 0));
            break;
        case(DIRECTION_Z_POS):
            index1d = Calc1dID(uint3(pos[0], pos[1], 0));
            break;
    }

    int borderfacebase = dir_index * THREADS * DispatchArgs[0] * THREADS * DispatchArgs[1];
    return BorderBlockMap[borderfacebase + index1d];
}

int GetBlock(int3 local_pos)
{
    int dir_index;
    if (IsExternalBlock(local_pos, dir_index))
    {
        return GetBorderBlock(dir_index, local_pos);
    }
    else
    {
        int index1d = Calc1dID((uint3)local_pos);

        return BlockMap[index1d];
    }
}

void DrawFaceQuads(uint starting_vert_index)
{
    int quad_index = QuadResult.IncrementCounter();
    InterlockedAdd(BufferLengths[QUADBUFFLENGTHINDEX], 4);
    for(int i = 0; i < VERTS_PER_FACE; i++)
    {
        QuadResult[quad_index].indicies[i] = starting_vert_index + i;
    }
}

void DrawFaceVerticies(int face_index, int3 local_position, int dir_index, int block_type)
{
    InterlockedAdd(BufferLengths[VERTBUFFLENGTHINDEX], 4);
    for(int i = 0; i < VERTS_PER_FACE; i++)
    {
        VertexResult[face_index].structs[i].position = local_position + FACES[dir_index][i];
        VertexResult[face_index].structs[i].normal = DIRECTIONS[dir_index];
        VertexResult[face_index].structs[i].texCoord = ((float2)FACES[DIRECTION_Z_NEG][i] * TNF) + GetBlockUV(block_type, dir_index);
    }
}

void DrawFace(int3 local_position, int dir_index, int block_type)
{
    int face_index = VertexResult.IncrementCounter(); // Calculate starting index in the VertexResult buffer
    DrawFaceVerticies(face_index, local_position, dir_index, block_type);
    DrawFaceQuads(face_index * VERTS_PER_FACE);
}

void DrawBlock(uint3 id, int block_type, int3 local_position)
{
    int id1d = Calc1dID(id);
    for(int i = 0; i < FACES_PER_VOXEL; i++)
    {
        if(GetBlock(local_position + DIRECTIONS[i]) == 0)
        {
            DrawFace(local_position, i, block_type);
        }
    }
}

[numthreads(THREADS,THREADS,THREADS)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int3 local_position = (int3)id;
    int block_type = GetBlock(local_position);
    if(block_type != 0)
    {
        DrawBlock(id, block_type, local_position);
    }
}